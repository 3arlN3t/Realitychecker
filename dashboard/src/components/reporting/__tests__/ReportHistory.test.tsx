import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import ReportHistory from '../ReportHistory';
import { ReportHistoryItem } from '../types';
import { format, subDays } from 'date-fns';

describe('ReportHistory Component', () => {
  const mockReports: ReportHistoryItem[] = [
    {
      id: '1',
      report_type: 'usage_summary',
      generated_at: format(subDays(new Date(), 1), 'yyyy-MM-dd\'T\'HH:mm:ss'),
      parameters: {
        report_type: 'usage_summary',
        start_date: format(subDays(new Date(), 30), 'yyyy-MM-dd\'T\'HH:mm:ss'),
        end_date: format(new Date(), 'yyyy-MM-dd\'T\'HH:mm:ss'),
        export_format: 'pdf'
      },
      download_url: '#',
      file_size: 1024 * 512, // 512 KB
      generated_by: 'admin',
      scheduled: false
    },
    {
      id: '2',
      report_type: 'classification_analysis',
      generated_at: format(subDays(new Date(), 3), 'yyyy-MM-dd\'T\'HH:mm:ss'),
      parameters: {
        report_type: 'classification_analysis',
        start_date: format(subDays(new Date(), 14), 'yyyy-MM-dd\'T\'HH:mm:ss'),
        end_date: format(new Date(), 'yyyy-MM-dd\'T\'HH:mm:ss'),
        export_format: 'xlsx'
      },
      download_url: '#',
      file_size: 1024 * 256, // 256 KB
      generated_by: 'analyst',
      scheduled: false
    }
  ];
  
  const mockOnPageChange = jest.fn();
  const mockOnDeleteReport = jest.fn();
  const mockOnSearchChange = jest.fn();
  
  beforeEach(() => {
    mockOnPageChange.mockReset();
    mockOnDeleteReport.mockReset();
    mockOnSearchChange.mockReset();
  });

  test('renders report history correctly', () => {
    render(
      <ReportHistory 
        reports={mockReports}
        totalReports={mockReports.length}
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
      />
    );
    
    expect(screen.getByText('Report History')).toBeInTheDocument();
    expect(screen.getByText('Usage Summary')).toBeInTheDocument();
    expect(screen.getByText('Classification Analysis')).toBeInTheDocument();
    expect(screen.getByText('admin')).toBeInTheDocument();
    expect(screen.getByText('analyst')).toBeInTheDocument();
  });

  test('shows empty state when no reports are available', () => {
    render(
      <ReportHistory 
        reports={[]}
        totalReports={0}
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
      />
    );
    
    expect(screen.getByText('No reports found')).toBeInTheDocument();
  });

  test('calls onSearchChange when search input changes', () => {
    render(
      <ReportHistory 
        reports={mockReports}
        totalReports={mockReports.length}
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
        onSearchChange={mockOnSearchChange}
      />
    );
    
    const searchInput = screen.getByPlaceholderText('Search reports');
    fireEvent.change(searchInput, { target: { value: 'usage' } });
    
    expect(mockOnSearchChange).toHaveBeenCalledTimes(1);
    expect(mockOnSearchChange).toHaveBeenCalledWith('usage');
  });

  test('opens details dialog when info button is clicked', async () => {
    render(
      <ReportHistory 
        reports={mockReports}
        totalReports={mockReports.length}
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
      />
    );
    
    // Find and click the info button (contains InfoIcon)
    const infoButtons = document.querySelectorAll('[data-testid="InfoIcon"]');
    fireEvent.click(infoButtons[0]);
    
    // Check that the dialog is open
    await waitFor(() => {
      expect(screen.getByText('Report Details')).toBeInTheDocument();
    });
    
    // Check that report details are displayed
    expect(screen.getByText('Usage Summary')).toBeInTheDocument();
    expect(screen.getByText('Generated By')).toBeInTheDocument();
    expect(screen.getByText('admin')).toBeInTheDocument();
  });

  test('shows delete confirmation dialog and calls onDeleteReport', async () => {
    render(
      <ReportHistory 
        reports={mockReports}
        totalReports={mockReports.length}
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
        onDeleteReport={mockOnDeleteReport}
      />
    );
    
    // Find and click the delete button (contains DeleteIcon)
    const deleteButtons = document.querySelectorAll('[data-testid="DeleteIcon"]');
    fireEvent.click(deleteButtons[0]);
    
    // Check that the confirmation dialog is open
    await waitFor(() => {
      expect(screen.getByText('Confirm Delete')).toBeInTheDocument();
    });
    
    // Click the confirm button
    const confirmButton = screen.getByText('Delete');
    fireEvent.click(confirmButton);
    
    // Check that onDeleteReport was called
    await waitFor(() => {
      expect(mockOnDeleteReport).toHaveBeenCalledTimes(1);
      expect(mockOnDeleteReport).toHaveBeenCalledWith('1');
    });
  });

  test('calls onPageChange when pagination is clicked', () => {
    render(
      <ReportHistory 
        reports={mockReports}
        totalReports={25} // More than one page
        page={1}
        pageSize={10}
        onPageChange={mockOnPageChange}
      />
    );
    
    // Find and click the next page button
    const nextPageButton = screen.getByLabelText('Go to page 2');
    fireEvent.click(nextPageButton);
    
    expect(mockOnPageChange).toHaveBeenCalledTimes(1);
    expect(mockOnPageChange).toHaveBeenCalledWith(2);
  });
});