import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  Chip,
  Divider,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  InputAdornment,
  Pagination
} from '@mui/material';
import HistoryIcon from '@mui/icons-material/History';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import DeleteIcon from '@mui/icons-material/Delete';
import SearchIcon from '@mui/icons-material/Search';
import ScheduleIcon from '@mui/icons-material/Schedule';
import InfoIcon from '@mui/icons-material/Info';
import { format, parseISO } from 'date-fns';
import { ReportHistoryItem, ReportType } from './types';

interface ReportHistoryProps {
  reports: ReportHistoryItem[];
  totalReports: number;
  page: number;
  pageSize: number;
  onPageChange: (page: number) => void;
  onDeleteReport?: (id: string) => Promise<void>;
  onSearchChange?: (search: string) => void;
}

const ReportHistory: React.FC<ReportHistoryProps> = ({
  reports,
  totalReports,
  page,
  pageSize,
  onPageChange,
  onDeleteReport,
  onSearchChange
}) => {
  const [search, setSearch] = useState('');
  const [selectedReport, setSelectedReport] = useState<ReportHistoryItem | null>(null);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [reportToDelete, setReportToDelete] = useState<string | null>(null);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);
    if (onSearchChange) {
      onSearchChange(e.target.value);
    }
  };

  const handleViewDetails = (report: ReportHistoryItem) => {
    setSelectedReport(report);
    setDetailsOpen(true);
  };

  const handleCloseDetails = () => {
    setDetailsOpen(false);
  };

  const handleDeleteClick = (id: string) => {
    setReportToDelete(id);
    setDeleteConfirmOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (reportToDelete && onDeleteReport) {
      await onDeleteReport(reportToDelete);
      setDeleteConfirmOpen(false);
      setReportToDelete(null);
    }
  };

  const handleCancelDelete = () => {
    setDeleteConfirmOpen(false);
    setReportToDelete(null);
  };

  const getReportTypeLabel = (type: ReportType): string => {
    switch (type) {
      case 'usage_summary': return 'Usage Summary';
      case 'classification_analysis': return 'Classification Analysis';
      case 'user_behavior': return 'User Behavior';
      case 'performance_metrics': return 'Performance Metrics';
      case 'error_analysis': return 'Error Analysis';
      case 'trend_analysis': return 'Trend Analysis';
      default: return type;
    }
  };

  const getFormatLabel = (format: string): string => {
    switch (format) {
      case 'pdf': return 'PDF';
      case 'csv': return 'CSV';
      case 'xlsx': return 'Excel';
      case 'json': return 'JSON';
      default: return format.toUpperCase();
    }
  };

  const getFormatColor = (format: string): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (format) {
      case 'pdf': return 'error';
      case 'csv': return 'success';
      case 'xlsx': return 'primary';
      case 'json': return 'info';
      default: return 'default';
    }
  };

  const totalPages = Math.ceil(totalReports / pageSize);

  return (
    <>
      <Paper sx={{ p: 3, mb: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">
            <HistoryIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            Report History
          </Typography>
          <TextField
            placeholder="Search reports"
            size="small"
            value={search}
            onChange={handleSearchChange}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
            sx={{ width: '250px' }}
          />
        </Box>
        
        <Typography variant="body2" color="textSecondary" paragraph>
          View and download previously generated reports
        </Typography>
        
        <Divider sx={{ my: 2 }} />
        
        {reports.length > 0 ? (
          <>
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Report Type</TableCell>
                    <TableCell>Generated At</TableCell>
                    <TableCell>Period</TableCell>
                    <TableCell>Format</TableCell>
                    <TableCell>Generated By</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {reports.map((report) => (
                    <TableRow key={report.id}>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          {getReportTypeLabel(report.report_type)}
                          {report.scheduled && (
                            <Tooltip title="Scheduled Report">
                              <ScheduleIcon fontSize="small" sx={{ ml: 1, color: 'text.secondary' }} />
                            </Tooltip>
                          )}
                        </Box>
                      </TableCell>
                      <TableCell>{format(parseISO(report.generated_at), 'MMM d, yyyy HH:mm')}</TableCell>
                      <TableCell>{report.parameters.start_date ? format(parseISO(report.parameters.start_date), 'MMM d') + ' - ' + format(parseISO(report.parameters.end_date), 'MMM d, yyyy') : 'N/A'}</TableCell>
                      <TableCell>
                        <Chip 
                          label={getFormatLabel(report.parameters.export_format)} 
                          size="small" 
                          color={getFormatColor(report.parameters.export_format)}
                        />
                      </TableCell>
                      <TableCell>{report.generated_by}</TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex' }}>
                          <Tooltip title="View Details">
                            <IconButton size="small" onClick={() => handleViewDetails(report)}>
                              <InfoIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          {report.download_url && (
                            <Tooltip title="Download Report">
                              <IconButton 
                                size="small" 
                                color="primary" 
                                component="a" 
                                href={report.download_url}
                                download
                              >
                                <FileDownloadIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          )}
                          
                          {onDeleteReport && (
                            <Tooltip title="Delete Report">
                              <IconButton 
                                size="small" 
                                color="error" 
                                onClick={() => handleDeleteClick(report.id)}
                              >
                                <DeleteIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          )}
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            
            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
              <Pagination 
                count={totalPages} 
                page={page} 
                onChange={(_, newPage) => onPageChange(newPage)} 
                color="primary" 
              />
            </Box>
          </>
        ) : (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <Typography variant="body1" color="textSecondary">
              No reports found
            </Typography>
            <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
              {search ? 'Try adjusting your search criteria' : 'Generate a report to see it here'}
            </Typography>
          </Box>
        )}
      </Paper>
      
      {/* Report Details Dialog */}
      <Dialog open={detailsOpen} onClose={handleCloseDetails} maxWidth="md" fullWidth>
        <DialogTitle>Report Details</DialogTitle>
        <DialogContent dividers>
          {selectedReport && (
            <Box>
              <Typography variant="h6" gutterBottom>
                {getReportTypeLabel(selectedReport.report_type)}
              </Typography>
              
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
                <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                  <Typography variant="subtitle2">Generated At</Typography>
                  <Typography variant="body2" gutterBottom>
                    {format(parseISO(selectedReport.generated_at), 'MMMM d, yyyy HH:mm:ss')}
                  </Typography>
                </Box>
                
                <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                  <Typography variant="subtitle2">Generated By</Typography>
                  <Typography variant="body2" gutterBottom>
                    {selectedReport.generated_by}
                  </Typography>
                </Box>
                
                <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                  <Typography variant="subtitle2">Date Range</Typography>
                  <Typography variant="body2" gutterBottom>
                    {selectedReport.parameters.start_date ? 
                      format(parseISO(selectedReport.parameters.start_date), 'MMMM d, yyyy') + ' - ' + 
                      format(parseISO(selectedReport.parameters.end_date), 'MMMM d, yyyy') : 
                      'N/A'}
                  </Typography>
                </Box>
                
                <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                  <Typography variant="subtitle2">Format</Typography>
                  <Typography variant="body2" gutterBottom>
                    <Chip 
                      label={getFormatLabel(selectedReport.parameters.export_format)} 
                      size="small" 
                      color={getFormatColor(selectedReport.parameters.export_format)}
                    />
                  </Typography>
                </Box>
                
                {selectedReport.file_size && (
                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                    <Typography variant="subtitle2">File Size</Typography>
                    <Typography variant="body2" gutterBottom>
                      {(selectedReport.file_size / 1024).toFixed(2)} KB
                    </Typography>
                  </Box>
                )}
                
                {selectedReport.scheduled && (
                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' } }}>
                    <Typography variant="subtitle2">Scheduled</Typography>
                    <Typography variant="body2" gutterBottom>
                      <Chip 
                        icon={<ScheduleIcon />} 
                        label="Automated Report" 
                        size="small" 
                        color="info"
                      />
                    </Typography>
                  </Box>
                )}
                
                <Box sx={{ flex: '1 1 100%' }}>
                  <Typography variant="subtitle2">Additional Parameters</Typography>
                  <Box sx={{ mt: 1, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>
                    <pre style={{ margin: 0, overflow: 'auto' }}>
                      {JSON.stringify(selectedReport.parameters, null, 2)}
                    </pre>
                  </Box>
                </Box>
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          {selectedReport?.download_url && (
            <Button 
              startIcon={<FileDownloadIcon />}
              component="a" 
              href={selectedReport.download_url}
              download
              color="primary"
            >
              Download
            </Button>
          )}
          <Button onClick={handleCloseDetails}>Close</Button>
        </DialogActions>
      </Dialog>
      
      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteConfirmOpen} onClose={handleCancelDelete}>
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <Typography>
            Are you sure you want to delete this report? This action cannot be undone.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelDelete}>Cancel</Button>
          <Button onClick={handleConfirmDelete} color="error" variant="contained">
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ReportHistory;