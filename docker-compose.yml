# Docker Compose configuration for Reality Checker WhatsApp Bot
# This file sets up the complete development environment

version: '3.8'

services:
  # ============================================================================
  # Main Application Service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reality-checker-app
    ports:
      - "8000:8000"
    environment:
      # Database configuration (PostgreSQL for production-like setup)
      - DATABASE_URL=postgresql+asyncpg://reality_checker:reality_checker_password@postgres:5432/reality_checker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=reality_checker
      - DB_USER=reality_checker
      - DB_PASSWORD=reality_checker_password
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_ECHO=false
      
      # Redis configuration - Enhanced with performance settings
      - REDIS_URL=redis://redis:6379/0
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-20}
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-50}
      - REDIS_CONNECTION_TIMEOUT=${REDIS_CONNECTION_TIMEOUT:-5.0}
      - REDIS_SOCKET_TIMEOUT=${REDIS_SOCKET_TIMEOUT:-5.0}
      - REDIS_RETRY_ATTEMPTS=${REDIS_RETRY_ATTEMPTS:-3}
      - REDIS_RETRY_BACKOFF=${REDIS_RETRY_BACKOFF:-1.0}
      - REDIS_HEALTH_CHECK_INTERVAL=${REDIS_HEALTH_CHECK_INTERVAL:-30}
      - REDIS_CIRCUIT_BREAKER_THRESHOLD=${REDIS_CIRCUIT_BREAKER_THRESHOLD:-5}
      - REDIS_CIRCUIT_BREAKER_TIMEOUT=${REDIS_CIRCUIT_BREAKER_TIMEOUT:-60}
      
      # Load environment variables from .env file
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      
      # Optional configuration
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - MAX_PDF_SIZE_MB=${MAX_PDF_SIZE_MB:-10}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WEBHOOK_VALIDATION=${WEBHOOK_VALIDATION:-true}
      
      # Performance tuning parameters
      - WEBHOOK_TIMEOUT=${WEBHOOK_TIMEOUT:-2.0}
      - WEBHOOK_ACKNOWLEDGMENT_TIMEOUT=${WEBHOOK_ACKNOWLEDGMENT_TIMEOUT:-0.5}
      - TASK_QUEUE_MAX_SIZE=${TASK_QUEUE_MAX_SIZE:-1000}
      - TASK_QUEUE_WORKER_COUNT=${TASK_QUEUE_WORKER_COUNT:-5}
      - TASK_QUEUE_BATCH_SIZE=${TASK_QUEUE_BATCH_SIZE:-10}
      - TASK_PROCESSING_TIMEOUT=${TASK_PROCESSING_TIMEOUT:-30}
      - TASK_RETRY_ATTEMPTS=${TASK_RETRY_ATTEMPTS:-3}
      - TASK_RETRY_BACKOFF=${TASK_RETRY_BACKOFF:-2.0}
      - PERFORMANCE_MONITORING_ENABLED=${PERFORMANCE_MONITORING_ENABLED:-true}
      - PERFORMANCE_ALERT_THRESHOLD_WEBHOOK=${PERFORMANCE_ALERT_THRESHOLD_WEBHOOK:-1.0}
      - PERFORMANCE_ALERT_THRESHOLD_CRITICAL=${PERFORMANCE_ALERT_THRESHOLD_CRITICAL:-3.0}
      
      # Authentication configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_EXPIRY_HOURS=${JWT_EXPIRY_HOURS:-24}
      - JWT_REFRESH_EXPIRY_DAYS=${JWT_REFRESH_EXPIRY_DAYS:-7}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    volumes:
      # Persist database and logs
      - ./data:/app/data
      - ./logs:/app/logs
      
      # Mount source code for development (comment out for production)
      - ./app:/app/app:ro
    depends_on:
      - postgres
    networks:
      - reality-checker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # PostgreSQL Database (for production-like setup)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: reality-checker-db
    environment:
      - POSTGRES_DB=reality_checker
      - POSTGRES_USER=reality_checker
      - POSTGRES_PASSWORD=reality_checker_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - reality-checker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reality_checker -d reality_checker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Redis (for caching and session storage) - Optimized Configuration
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: reality-checker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      # Redis performance tuning - More conservative settings
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-512mb}
      - REDIS_MAXMEMORY_POLICY=${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT:-600}
      - REDIS_TCP_KEEPALIVE=${REDIS_TCP_KEEPALIVE:-60}
    networks:
      - reality-checker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    sysctls:
      # Optimize for performance
      - net.core.somaxconn=65535
    ulimits:
      memlock: -1
      nofile:
        soft: 65536
        hard: 65536

  # ============================================================================
  # Nginx Reverse Proxy (for production-like setup)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: reality-checker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - reality-checker-network
    restart: unless-stopped

# ============================================================================
# Networks and Volumes
# ============================================================================
networks:
  reality-checker-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local